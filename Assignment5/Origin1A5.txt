#include "cacheSim.h"

// In this question, we will assume DRAM will take a 4-byte values starting from 0 to 
void init_DRAM()
{
	unsigned int i=0;
	DRAM = malloc(sizeof(char) * DRAM_SIZE);
	for(i=0;i<DRAM_SIZE/4;i++)
	{
		*((unsigned int*)DRAM+i) = i;
	}
}

void printCache()
{
	int i,j,k;
	printf("===== L1 Cache Content =====\n");
	for(i=0;i<2;i++)
	{
		printf("Set %d :", i);
		for(j=0;j<2;j++)
		{
			printf(" {(TAG: 0x%x)", (unsigned int)(L1_cache[i][j].tag));
			for(k=0;k<16;k++)
				printf(" 0x%x,", (unsigned int)(L1_cache[i][j].data[k]));
			printf(" |");
		}
		printf("\n");
	}
	printf("===== L2 Cache Content =====\n");
	for(i=0;i<4;i++)
	{
		printf("Set %d :", i);
		for(j=0;j<4;j++)
		{
			printf(" {(TAG: 0x%x)", (unsigned int)(L2_cache[i][j].tag));
			for(k=0;k<16;k++)
				printf(" 0x%x,", (unsigned int)(L2_cache[i][j].data[k]));
			printf(" |");
		}
		printf("\n");
	}
}


int L1lookup(u_int32_t address)
{
	u_int32_t tag = getL1Tag(address);
	u_int32_t set = getL1SetID(address);
	for(int i=0;i<2;i++)
	{
		if(L1_cache[set][i].tag == tag) return 1;
	}
	return 0;
}

int L2lookup(u_int32_t address)
{
	u_int32_t tag = getL2Tag(address);
	u_int32_t set = getL2SetID(address);
	for(int i=0;i<4;i++)
	{
		if(L2_cache[set][i].tag == tag) return 1;
	}
	return 0;

}

// This function performs a read to an address.
u_int32_t read(u_int32_t address)
{
    unsigned int setID = getL1SetID(address);
    unsigned int tag = getL1Tag(address);
    u_int32_t data = 0; 

    for (int i = 0; i < 2; i++)
    {
        if (L1_cache[setID][i].tag == tag)
        {
            for (int j = 0; j < 4; j++)
            {
                data |= (L1_cache[setID][i].data[j] << (j * 8)); 
            }
            L1_cache[setID][i].timeStamp = cycles;
            return data;
        }
    }

    for (int i = 0; i < 4; i++)
    {
        data |= (L1_cache[setID][0].data[i] << (i * 8)); // Assuming 4-byte data.
    }

    return data;
}

// This function access the L1 cache for the address. Type is 0 for a read and 1 for a write.
int L1access(u_int32_t address, int type, u_int32_t data)
{
    unsigned int setID = getL1SetID(address);
    unsigned int tag = getL1Tag(address);

    for (int i = 0; i < 2; i++)
    {
        if (L1_cache[setID][i].tag == tag)
        {
            if (type == 1)
            {
                for (int j = 0; j < 16; j++)
                {
                    L1_cache[setID][i].data[j] = (data >> (j * 8)) & 0xFF; 
                }
            }
            L1_cache[setID][i].timeStamp = cycles;
            return 1; 
        }
    }

    return 0;
}

// This function access the L2 cache for the address. Type is 0 for a read and 1 for a write.
int L2access(u_int32_t address, int type, u_int32_t data)
{
    unsigned int setID = getL2SetID(address);
    unsigned int tag = getL2Tag(address);

    for (int i = 0; i < 4; i++)
    {
        if (L2_cache[setID][i].tag == tag)
        {
            if (type == 1)
            {
                for (int j = 0; j < 16; j++)
                {
                    L2_cache[setID][i].data[j] = (data >> (j * 8)) & 0xFF; // Assuming 4-byte data.
                }
            }
            L2_cache[setID][i].timeStamp = cycles;

            int L1_hit = L1lookup(address);
            if (L1_hit)
            {
                if (type == 1)
                {
                    L1access(address, type, data);
                }
                else
                {
                    unsigned int L1_setID = getL1SetID(address);
                    unsigned int L1_tag = getL1Tag(address);
                    for (int j = 0; j < 2; j++)
                    {
                        if (L1_cache[L1_setID][j].tag == L1_tag)
                        {
                            L1_cache[L1_setID][j].timeStamp = cycles;
                            break;
                        }
                    }
                }
            }

            return 1;
        }
    }

    return 0; // Cache miss in L2
}

// This functions replace the LRU block in the L1 with the input block
void L1replace(cacheBlock block, int setID)
{
    int lruIndex = (L1_cache[setID][0].timeStamp < L1_cache[setID][1].timeStamp) ? 0 : 1;

    L1_cache[setID][lruIndex] = block;
}

// This functions replace the LRU block in the L2 with the input block
void L2replace(cacheBlock block, int setID)
{
    int lruIndex = 0;
    for (int i = 1; i < 4; i++)
    {
        if (L2_cache[setID][i].timeStamp < L2_cache[setID][lruIndex].timeStamp)
        {
            lruIndex = i;
        }
    }

    L2_cache[setID][lruIndex] = block;
}

unsigned int getL1SetID(u_int32_t address)
{
	return (address >> 4) & 0x1; // TODO
}

unsigned int getL2SetID(u_int32_t address)
{
	return (address >> 5) & 0x3; // TODO
}

unsigned int getL1Tag(u_int32_t address)
{
	return address >> 5; // TODO
}

unsigned int getL2Tag(u_int32_t address)
{
	return address >> 6; // TODO
}


void write(u_int32_t address, u_int32_t data)
{
    unsigned int setID = getL1SetID(address);
    unsigned int tag = getL1Tag(address);

    for (int i = 0; i < 2; i++)
    {
        if (L1_cache[setID][i].tag == tag)
        {
            L1_cache[setID][i].data[(address & 0x0F) >> 2] = (data >> ((address & 0x03) << 3)) & 0xFF;
            L1_cache[setID][i].timeStamp = cycles;
            break;
        }
    }

    unsigned int L2_setID = getL2SetID(address);
    unsigned int L2_tag = getL2Tag(address);
    for (int i = 0; i < 4; i++)
    {
        if (L2_cache[L2_setID][i].tag == L2_tag)
        {
            L2_cache[L2_setID][i].data[(address & 0x0F) >> 2] = (data >> ((address & 0x03) << 3)) & 0xFF; 
            L2_cache[L2_setID][i].timeStamp = cycles;
            break;
        }
    }
}


int main()
{
	init_DRAM();
	cacheAccess buffer;
	int timeTaken=0;
	FILE *trace = fopen("input.trace","r");
	int L1hit = 0;
	int L2hit = 0;
	cycles = 0;
	while(!feof(trace))
	{
		fscanf(trace,"%d %x %x", &buffer.readWrite, &buffer.address, &buffer.data);
		printf("Processing the request for [R/W] = %d, Address = %x, data = %x\n", buffer.readWrite, buffer.address, buffer.data);

		// Checking whether the current access is a hit or miss so that we can advance time correctly
		if(L1lookup(buffer.address))// Cache hit
		{
			timeTaken = 1;
			L1hit++;
		}
		else if(L2lookup(buffer.address))// L2 Cache Hit
		{
			L2hit++;
			timeTaken = 5;
		}
		else timeTaken = 50;
		if (buffer.readWrite) write(buffer.address, buffer.data);
		else read(buffer.address);
		cycles+=timeTaken;
	}
	printCache();
	printf("Total cycles used = %ld\nL1 hits = %d, L2 hits = %d", cycles, L1hit, L2hit);
	fclose(trace);
	free(DRAM);
	return 0;
}